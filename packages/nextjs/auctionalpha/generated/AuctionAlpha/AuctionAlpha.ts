// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AuctionClosed extends ethereum.Event {
  get params(): AuctionClosed__Params {
    return new AuctionClosed__Params(this);
  }
}

export class AuctionClosed__Params {
  _event: AuctionClosed;

  constructor(event: AuctionClosed) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get actualClosingTimestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AuctionStarted extends ethereum.Event {
  get params(): AuctionStarted__Params {
    return new AuctionStarted__Params(this);
  }
}

export class AuctionStarted__Params {
  _event: AuctionStarted;

  constructor(event: AuctionStarted) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get openingTimestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BidPlaced extends ethereum.Event {
  get params(): BidPlaced__Params {
    return new BidPlaced__Params(this);
  }
}

export class BidPlaced__Params {
  _event: BidPlaced;

  constructor(event: BidPlaced) {
    this._event = event;
  }

  get bidder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get auctionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get bidAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UnsoldNFTDelisted extends ethereum.Event {
  get params(): UnsoldNFTDelisted__Params {
    return new UnsoldNFTDelisted__Params(this);
  }
}

export class UnsoldNFTDelisted__Params {
  _event: UnsoldNFTDelisted;

  constructor(event: UnsoldNFTDelisted) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UnsoldNFTListed extends ethereum.Event {
  get params(): UnsoldNFTListed__Params {
    return new UnsoldNFTListed__Params(this);
  }
}

export class UnsoldNFTListed__Params {
  _event: UnsoldNFTListed;

  constructor(event: UnsoldNFTListed) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WithdrawSuccess extends ethereum.Event {
  get params(): WithdrawSuccess__Params {
    return new WithdrawSuccess__Params(this);
  }
}

export class WithdrawSuccess__Params {
  _event: WithdrawSuccess;

  constructor(event: WithdrawSuccess) {
    this._event = event;
  }

  get bidder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get withdrawnedAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AuctionAlpha__checkUpkeepResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getValue0(): boolean {
    return this.value0;
  }

  getValue1(): Bytes {
    return this.value1;
  }
}

export class AuctionAlpha__getAuctionByIdResultValue0Struct extends ethereum.Tuple {
  get auctionId(): BigInt {
    return this[0].toBigInt();
  }

  get nftId(): BigInt {
    return this[1].toBigInt();
  }

  get openingTimestamp(): BigInt {
    return this[2].toBigInt();
  }

  get closingTimestamp(): BigInt {
    return this[3].toBigInt();
  }

  get startingPrice(): BigInt {
    return this[4].toBigInt();
  }

  get minimumBidIncrement(): BigInt {
    return this[5].toBigInt();
  }

  get isOpen(): boolean {
    return this[6].toBoolean();
  }

  get winner(): Address {
    return this[7].toAddress();
  }
}

export class AuctionAlpha__s_auctionsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: boolean;
  value7: Address;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: boolean,
    value7: Address,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    map.set("value7", ethereum.Value.fromAddress(this.value7));
    return map;
  }

  getAuctionId(): BigInt {
    return this.value0;
  }

  getNftId(): BigInt {
    return this.value1;
  }

  getOpeningTimestamp(): BigInt {
    return this.value2;
  }

  getClosingTimestamp(): BigInt {
    return this.value3;
  }

  getStartingPrice(): BigInt {
    return this.value4;
  }

  getMinimumBidIncrement(): BigInt {
    return this.value5;
  }

  getIsOpen(): boolean {
    return this.value6;
  }

  getWinner(): Address {
    return this.value7;
  }
}

export class AuctionAlpha extends ethereum.SmartContract {
  static bind(address: Address): AuctionAlpha {
    return new AuctionAlpha("AuctionAlpha", address);
  }

  AUCTION_DURATION_DAYS(): BigInt {
    let result = super.call(
      "AUCTION_DURATION_DAYS",
      "AUCTION_DURATION_DAYS():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_AUCTION_DURATION_DAYS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "AUCTION_DURATION_DAYS",
      "AUCTION_DURATION_DAYS():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkUpkeep(param0: Bytes): AuctionAlpha__checkUpkeepResult {
    let result = super.call("checkUpkeep", "checkUpkeep(bytes):(bool,bytes)", [
      ethereum.Value.fromBytes(param0),
    ]);

    return new AuctionAlpha__checkUpkeepResult(
      result[0].toBoolean(),
      result[1].toBytes(),
    );
  }

  try_checkUpkeep(
    param0: Bytes,
  ): ethereum.CallResult<AuctionAlpha__checkUpkeepResult> {
    let result = super.tryCall(
      "checkUpkeep",
      "checkUpkeep(bytes):(bool,bytes)",
      [ethereum.Value.fromBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AuctionAlpha__checkUpkeepResult(
        value[0].toBoolean(),
        value[1].toBytes(),
      ),
    );
  }

  getAuctionById(
    auctionId: BigInt,
  ): AuctionAlpha__getAuctionByIdResultValue0Struct {
    let result = super.call(
      "getAuctionById",
      "getAuctionById(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,bool,address))",
      [ethereum.Value.fromUnsignedBigInt(auctionId)],
    );

    return changetype<AuctionAlpha__getAuctionByIdResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getAuctionById(
    auctionId: BigInt,
  ): ethereum.CallResult<AuctionAlpha__getAuctionByIdResultValue0Struct> {
    let result = super.tryCall(
      "getAuctionById",
      "getAuctionById(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,bool,address))",
      [ethereum.Value.fromUnsignedBigInt(auctionId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<AuctionAlpha__getAuctionByIdResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getIsTokenListed(tokenId: BigInt): boolean {
    let result = super.call(
      "getIsTokenListed",
      "getIsTokenListed(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );

    return result[0].toBoolean();
  }

  try_getIsTokenListed(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getIsTokenListed",
      "getIsTokenListed(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getUnsoldNFTPrice(tokenId: BigInt): BigInt {
    let result = super.call(
      "getUnsoldNFTPrice",
      "getUnsoldNFTPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );

    return result[0].toBigInt();
  }

  try_getUnsoldNFTPrice(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUnsoldNFTPrice",
      "getUnsoldNFTPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWithdrawableAmountByBidderAddress(bidder: Address): BigInt {
    let result = super.call(
      "getWithdrawableAmountByBidderAddress",
      "getWithdrawableAmountByBidderAddress(address):(uint256)",
      [ethereum.Value.fromAddress(bidder)],
    );

    return result[0].toBigInt();
  }

  try_getWithdrawableAmountByBidderAddress(
    bidder: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getWithdrawableAmountByBidderAddress",
      "getWithdrawableAmountByBidderAddress(address):(uint256)",
      [ethereum.Value.fromAddress(bidder)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  i_nftContract(): Address {
    let result = super.call("i_nftContract", "i_nftContract():(address)", []);

    return result[0].toAddress();
  }

  try_i_nftContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "i_nftContract",
      "i_nftContract():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  s_auctions(param0: BigInt): AuctionAlpha__s_auctionsResult {
    let result = super.call(
      "s_auctions",
      "s_auctions(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,bool,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new AuctionAlpha__s_auctionsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBoolean(),
      result[7].toAddress(),
    );
  }

  try_s_auctions(
    param0: BigInt,
  ): ethereum.CallResult<AuctionAlpha__s_auctionsResult> {
    let result = super.tryCall(
      "s_auctions",
      "s_auctions(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,bool,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AuctionAlpha__s_auctionsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBoolean(),
        value[7].toAddress(),
      ),
    );
  }

  s_currentAuctionId(): BigInt {
    let result = super.call(
      "s_currentAuctionId",
      "s_currentAuctionId():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_s_currentAuctionId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "s_currentAuctionId",
      "s_currentAuctionId():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  s_currentHighestBid(): BigInt {
    let result = super.call(
      "s_currentHighestBid",
      "s_currentHighestBid():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_s_currentHighestBid(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "s_currentHighestBid",
      "s_currentHighestBid():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  s_currentNftId(): BigInt {
    let result = super.call("s_currentNftId", "s_currentNftId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_s_currentNftId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "s_currentNftId",
      "s_currentNftId():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  s_currentWinner(): Address {
    let result = super.call(
      "s_currentWinner",
      "s_currentWinner():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_s_currentWinner(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "s_currentWinner",
      "s_currentWinner():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  s_forwarderAddress(): Address {
    let result = super.call(
      "s_forwarderAddress",
      "s_forwarderAddress():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_s_forwarderAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "s_forwarderAddress",
      "s_forwarderAddress():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  s_listOfHighestBidPerUser(auctionId: BigInt, bidder: Address): BigInt {
    let result = super.call(
      "s_listOfHighestBidPerUser",
      "s_listOfHighestBidPerUser(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromAddress(bidder),
      ],
    );

    return result[0].toBigInt();
  }

  try_s_listOfHighestBidPerUser(
    auctionId: BigInt,
    bidder: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "s_listOfHighestBidPerUser",
      "s_listOfHighestBidPerUser(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromAddress(bidder),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  s_minimumBidIncrement(): BigInt {
    let result = super.call(
      "s_minimumBidIncrement",
      "s_minimumBidIncrement():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_s_minimumBidIncrement(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "s_minimumBidIncrement",
      "s_minimumBidIncrement():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  s_startingPrice(): BigInt {
    let result = super.call(
      "s_startingPrice",
      "s_startingPrice():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_s_startingPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "s_startingPrice",
      "s_startingPrice():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  s_withdrawableAmountPerBidder(bidder: Address): BigInt {
    let result = super.call(
      "s_withdrawableAmountPerBidder",
      "s_withdrawableAmountPerBidder(address):(uint256)",
      [ethereum.Value.fromAddress(bidder)],
    );

    return result[0].toBigInt();
  }

  try_s_withdrawableAmountPerBidder(
    bidder: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "s_withdrawableAmountPerBidder",
      "s_withdrawableAmountPerBidder(address):(uint256)",
      [ethereum.Value.fromAddress(bidder)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class BuyUnsoldNFTCall extends ethereum.Call {
  get inputs(): BuyUnsoldNFTCall__Inputs {
    return new BuyUnsoldNFTCall__Inputs(this);
  }

  get outputs(): BuyUnsoldNFTCall__Outputs {
    return new BuyUnsoldNFTCall__Outputs(this);
  }
}

export class BuyUnsoldNFTCall__Inputs {
  _call: BuyUnsoldNFTCall;

  constructor(call: BuyUnsoldNFTCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyUnsoldNFTCall__Outputs {
  _call: BuyUnsoldNFTCall;

  constructor(call: BuyUnsoldNFTCall) {
    this._call = call;
  }
}

export class BuyUnsoldNFTNonPayableCall extends ethereum.Call {
  get inputs(): BuyUnsoldNFTNonPayableCall__Inputs {
    return new BuyUnsoldNFTNonPayableCall__Inputs(this);
  }

  get outputs(): BuyUnsoldNFTNonPayableCall__Outputs {
    return new BuyUnsoldNFTNonPayableCall__Outputs(this);
  }
}

export class BuyUnsoldNFTNonPayableCall__Inputs {
  _call: BuyUnsoldNFTNonPayableCall;

  constructor(call: BuyUnsoldNFTNonPayableCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyUnsoldNFTNonPayableCall__Outputs {
  _call: BuyUnsoldNFTNonPayableCall;

  constructor(call: BuyUnsoldNFTNonPayableCall) {
    this._call = call;
  }
}

export class CloseAuctionCall extends ethereum.Call {
  get inputs(): CloseAuctionCall__Inputs {
    return new CloseAuctionCall__Inputs(this);
  }

  get outputs(): CloseAuctionCall__Outputs {
    return new CloseAuctionCall__Outputs(this);
  }
}

export class CloseAuctionCall__Inputs {
  _call: CloseAuctionCall;

  constructor(call: CloseAuctionCall) {
    this._call = call;
  }
}

export class CloseAuctionCall__Outputs {
  _call: CloseAuctionCall;

  constructor(call: CloseAuctionCall) {
    this._call = call;
  }
}

export class PerformUpkeepCall extends ethereum.Call {
  get inputs(): PerformUpkeepCall__Inputs {
    return new PerformUpkeepCall__Inputs(this);
  }

  get outputs(): PerformUpkeepCall__Outputs {
    return new PerformUpkeepCall__Outputs(this);
  }
}

export class PerformUpkeepCall__Inputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PerformUpkeepCall__Outputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }
}

export class PlaceBidCall extends ethereum.Call {
  get inputs(): PlaceBidCall__Inputs {
    return new PlaceBidCall__Inputs(this);
  }

  get outputs(): PlaceBidCall__Outputs {
    return new PlaceBidCall__Outputs(this);
  }
}

export class PlaceBidCall__Inputs {
  _call: PlaceBidCall;

  constructor(call: PlaceBidCall) {
    this._call = call;
  }
}

export class PlaceBidCall__Outputs {
  _call: PlaceBidCall;

  constructor(call: PlaceBidCall) {
    this._call = call;
  }
}

export class PlaceBidNonPayableCall extends ethereum.Call {
  get inputs(): PlaceBidNonPayableCall__Inputs {
    return new PlaceBidNonPayableCall__Inputs(this);
  }

  get outputs(): PlaceBidNonPayableCall__Outputs {
    return new PlaceBidNonPayableCall__Outputs(this);
  }
}

export class PlaceBidNonPayableCall__Inputs {
  _call: PlaceBidNonPayableCall;

  constructor(call: PlaceBidNonPayableCall) {
    this._call = call;
  }

  get bid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PlaceBidNonPayableCall__Outputs {
  _call: PlaceBidNonPayableCall;

  constructor(call: PlaceBidNonPayableCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetForwarderAddressCall extends ethereum.Call {
  get inputs(): SetForwarderAddressCall__Inputs {
    return new SetForwarderAddressCall__Inputs(this);
  }

  get outputs(): SetForwarderAddressCall__Outputs {
    return new SetForwarderAddressCall__Outputs(this);
  }
}

export class SetForwarderAddressCall__Inputs {
  _call: SetForwarderAddressCall;

  constructor(call: SetForwarderAddressCall) {
    this._call = call;
  }

  get forwarderAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetForwarderAddressCall__Outputs {
  _call: SetForwarderAddressCall;

  constructor(call: SetForwarderAddressCall) {
    this._call = call;
  }
}

export class SetMinimumBidIncrementCall extends ethereum.Call {
  get inputs(): SetMinimumBidIncrementCall__Inputs {
    return new SetMinimumBidIncrementCall__Inputs(this);
  }

  get outputs(): SetMinimumBidIncrementCall__Outputs {
    return new SetMinimumBidIncrementCall__Outputs(this);
  }
}

export class SetMinimumBidIncrementCall__Inputs {
  _call: SetMinimumBidIncrementCall;

  constructor(call: SetMinimumBidIncrementCall) {
    this._call = call;
  }

  get minimumBidIncrement(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinimumBidIncrementCall__Outputs {
  _call: SetMinimumBidIncrementCall;

  constructor(call: SetMinimumBidIncrementCall) {
    this._call = call;
  }
}

export class SetStartingPriceCall extends ethereum.Call {
  get inputs(): SetStartingPriceCall__Inputs {
    return new SetStartingPriceCall__Inputs(this);
  }

  get outputs(): SetStartingPriceCall__Outputs {
    return new SetStartingPriceCall__Outputs(this);
  }
}

export class SetStartingPriceCall__Inputs {
  _call: SetStartingPriceCall;

  constructor(call: SetStartingPriceCall) {
    this._call = call;
  }

  get startingPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetStartingPriceCall__Outputs {
  _call: SetStartingPriceCall;

  constructor(call: SetStartingPriceCall) {
    this._call = call;
  }
}

export class StartAuctionCall extends ethereum.Call {
  get inputs(): StartAuctionCall__Inputs {
    return new StartAuctionCall__Inputs(this);
  }

  get outputs(): StartAuctionCall__Outputs {
    return new StartAuctionCall__Outputs(this);
  }
}

export class StartAuctionCall__Inputs {
  _call: StartAuctionCall;

  constructor(call: StartAuctionCall) {
    this._call = call;
  }
}

export class StartAuctionCall__Outputs {
  _call: StartAuctionCall;

  constructor(call: StartAuctionCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawBidCall extends ethereum.Call {
  get inputs(): WithdrawBidCall__Inputs {
    return new WithdrawBidCall__Inputs(this);
  }

  get outputs(): WithdrawBidCall__Outputs {
    return new WithdrawBidCall__Outputs(this);
  }
}

export class WithdrawBidCall__Inputs {
  _call: WithdrawBidCall;

  constructor(call: WithdrawBidCall) {
    this._call = call;
  }

  get withdrawAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawBidCall__Outputs {
  _call: WithdrawBidCall;

  constructor(call: WithdrawBidCall) {
    this._call = call;
  }
}
